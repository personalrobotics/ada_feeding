<launch>
  <arg name="run_web_bridge" default="false" description="Whether to run the web bridge nodes" />
  <arg name="use_estop" default="true" description="Whether to use the e-stop. Should only be set false in sim, since we don't have a way of simulating the e-stop button." />
  <arg name="log_level" default="info" description="Log Level to pass to create_action_servers: debug, info, warn" />
  <arg name="policy" default="constant" description="Which policy to use" />
  <arg name="action" default="0" description="Which action to use with constant policy" />

  <group if="$(var run_web_bridge)">
    <!-- The ROSBridge Node -->
    <include file="$(find-pkg-share rosbridge_server)/launch/rosbridge_websocket_launch.xml"/>
  </group>

  <!-- Launch the watchdog -->
  <node pkg="ada_feeding" exec="ada_watchdog.py" name="ada_watchdog">
    <param from="$(find-pkg-share ada_feeding)/config/ada_watchdog.yaml"/>
    <param name="use_estop" value="$(var use_estop)"/>
    <remap from="~/ft_topic" to="/wireless_ft/ftSensor3" />
  </node>

  <!-- Launch the action servers necessary to move the robot -->
  <node pkg="ada_feeding" exec="create_action_servers.py" name="ada_feeding_action_servers" respawn="true" args="--ros-args --log-level $(var log_level) --log-level rcl:=INFO --log-level rmw_cyclonedds_cpp:=INFO">
    <param from="$(find-pkg-share ada_feeding)/config/ada_feeding_action_servers_default.yaml"/>
    <param from="$(find-pkg-share ada_feeding)/config/ada_feeding_action_servers_current.yaml"/>
    <remap from="~/watchdog" to="/ada_watchdog/watchdog" />
    <remap from="~/toggle_watchdog_listener" to="/ada_watchdog_listener/toggle_watchdog_listener" />
    <remap from="~/re_tare_ft" to="/wireless_ft/set_bias" />
    <remap from="~/ft_topic" to="/wireless_ft/ftSensor3" />
    <remap from="~/set_force_gate_controller_parameters" to="/jaco_arm_controller/set_parameters" />
    <remap from="~/set_servo_controller_parameters" to="/jaco_arm_servo_controller/set_parameters" />
    <remap from="~/set_cartesian_controller_parameters" to="/jaco_arm_cartesian_controller/set_parameters" />
    <remap from="~/clear_octomap" to="/clear_octomap" />
    <remap from="~/toggle_face_detection" to="/toggle_face_detection" />
    <remap from="~/face_detection" to="/face_detection" />
    <remap from="~/switch_controller" to="/controller_manager/switch_controller" />
    <remap from="~/start_servo" to="/servo_node/start_servo" />
    <remap from="~/servo_twist_cmds" to="/servo_node/delta_twist_cmds" />
    <remap from="~/cartesian_twist_cmds" to="/jaco_arm_cartesian_controller/twist_cmd" />
    <remap from="~/servo_status" to="/servo_node/status" />
    <remap from="~/stop_servo" to="/servo_node/stop_servo" />
    <remap from="~/action_select" to="/ada_feeding_action_select/action_select" />
    <remap from="~/action_report" to="/ada_feeding_action_select/action_report" />
  </node>

  <!-- Launch a republisher to pass web app servo commands to the servo node -->
  <node pkg="ada_moveit" exec="servo_republisher.py" name="servo_republisher">
    <remap from="~/cartesian_commands_input" to="/web_app/servo_node/delta_twist_cmds" />
    <remap from="~/joint_commands_input" to="/web_app/servo_node/delta_joint_cmds" />
    <remap from="~/cartesian_commands_output" to="/servo_node/delta_twist_cmds" />
    <remap from="~/joint_commands_output" to="/servo_node/delta_joint_cmds" />
  </node>

  <!-- Include Action Selection Server -->
  <include file="$(find-pkg-share ada_feeding_action_select)/launch/ada_feeding_action_select_launch.xml">
    <arg name="policy" value="$(var policy)" />
    <arg name="action" value="$(var action)" />
  </include>

  <!-- Populate the planning scene -->
  <node pkg="ada_feeding" exec="ada_planning_scene.py" name="ada_planning_scene">
    <param from="$(find-pkg-share ada_feeding)/config/ada_planning_scene.yaml"/>
    <param name="assets_dir" value="$(find-pkg-share ada_feeding)/assets/"/>
    <remap from="~/face_detection" to="/face_detection" />
  </node>

</launch>
