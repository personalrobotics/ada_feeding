## Cross-Policy Variables
# RCL *NEEDS* to add aliases
# See: https://github.com/personalrobotics/ada_feeding/issues/79
#define: &library config/acquisition_library.yaml
#define: &data_prefix default_spanet
#define: &context_lambda 1000.0
#define: &posthoc_lambda 1.0

# NOTE: You have to change this node name if you change the node name in the launchfile.
ada_feeding_action_select:
  ros__parameters:

    #### Context Adapters

    #context_class: ada_feeding_action_select.adapters.SPANetContext
    #context_kws:
    #  - checkpoint # Relative to share data directory
    #context_kwargs:
    #  checkpoint: checkpoint/adapter/food_spanet_all_rgb_wall_ckpt_best.pth

    context_class: ada_feeding_action_select.adapters.NoContext

    #### Posthoc Adapters

    #posthoc_class: ada_feeding_action_select.adapters.HapticNetPosthoc
    #posthoc_kws:
    #  - checkpoint # Path relative to share data directory
    #  - n_features 
    #  - gpu_index
    #posthoc_kwargs:
    #  checkpoint: checkpoint/adapter/hapticnet_ckpt.pth
    #  n_features: 4
    #  gpu_index: 0

    posthoc_class: ada_feeding_action_select.adapters.NoContext

    #### Records/Replays and Checkpoints

    # Optional
    # Directory to save relative to share data directory
    # If defined: Files will be saved as <record_dir>/<timestamp>_record.pt
    # Each file contains one AcquisitionSelect and one AcquisitionReport
    record_dir: records/pilot/

    # Required
    # Directory to save/load relative to share data directory
    # Files will be saved as <checkpoint_dir>/<timestamp>_ckpt.pt
    # with torch.save()
    checkpoint_dir: checkpoint/pilot/
    # Whether to load latest checkpoint in dir at start
    checkpoint_load_latest: True
    # How often to save a new checkpoint
    # Must be >0
    # Undefine to disable checkpoint saving
    checkpoint_save_period: 1

    #### Policies

    constant: # required
      policy_class: ada_feeding_action_select.policies.ConstantPolicy # required
      kws: # optional
        - library
        - index
      kwargs: # optional
        library: config/acquisition_library.yaml # path to library of actions (package share)
        index: 0 # Which action to execute

    random:
      policy_class: ada_feeding_action_select.policies.RandomPolicy
      kws: 
        - library
        - context_lambda
        - posthoc_lambda
        - data_prefix
      kwargs:
        library: config/acquisition_library.yaml # path to library of actions (package share)
        context_lambda: 1000.0 # L2 regularizer for context
        posthoc_lambda: 1.0 # L2 regularizer for posthoc

    egreedy:
      policy_class: ada_feeding_action_select.policies.EGreedyPolicy
      kws: 
        - library
        - context_lambda
        - posthoc_lambda
        - data_prefix
        - epsilon
      kwargs:
        library: config/acquisition_library.yaml # path to library of actions (package share)
        context_lambda: 1000.0 # L2 regularizer for context
        posthoc_lambda: 0.0 # L2 regularizer for posthoc
        data_prefix: default_spanet # data will be stored in (share)/data/<data_prefix>_<policy_name>.npz
        epsilon: 0.1 # how often to take a random action

    egreedy_posthoc:
      policy_class: ada_feeding_action_select.policies.EGreedyPolicy
      kws: 
        - library
        - context_lambda
        - posthoc_lambda
        - data_prefix
        - epsilon
      kwargs:
        library: config/acquisition_library.yaml # path to library of actions (package share)
        context_lambda: 1000.0 # L2 regularizer for context
        posthoc_lambda: 1.0 # L2 regularizer for posthoc
        data_prefix: default_spanet # data will be stored in (share)/data/<data_prefix>_<policy_name>.npz
        epsilon: 0.1 # how often to take a random action

    linucb:
      policy_class: ada_feeding_action_select.policies.LinUCBPolicy
      kws: 
        - library
        - context_lambda
        - posthoc_lambda
        - data_prefix
        - alpha
      kwargs:
        library: config/acquisition_library.yaml # path to library of actions (package share)
        context_lambda: 1000.0 # L2 regularizer for context
        posthoc_lambda: 0.0 # L2 regularizer for posthoc
        data_prefix: default_spanet # data will be stored in (share)/data/<data_prefix>_<policy_name>.npz
        alpha: 0.01 # scaling factor for the confidence bound

    linucb_posthoc:
      policy_class: ada_feeding_action_select.policies.LinUCBPolicy
      kws: 
        - library
        - context_lambda
        - posthoc_lambda
        - data_prefix
        - alpha
      kwargs:
        library: config/acquisition_library.yaml # path to library of actions (package share)
        context_lambda: 1000.0 # L2 regularizer for context
        posthoc_lambda: 1.0 # L2 regularizer for posthoc
        data_prefix: default_spanet # data will be stored in (share)/data/<data_prefix>_<policy_name>.npz
        alpha: 0.01 # scaling factor for the confidence bound
